public class UF {
	int[] id;
	int[] sz; //maintain extra array sz[i]	to count number of objects in the tree rooted at i.
	int size;

	public UF(int N){
		id = new int[N];
		for (int i = 0; i < N; i++)			//set id of each object to itself		(N array accesses)
			id[i] = i;
		size = N;
	}
	
	public void oldUnion(int p, int q) throws Exception{
		if(p >= size || q >= size)
			throw new Exception("P or Q is bigger than array length. It most be smaller than " + size);
		int pid = id[p];
		int qid = id[q];
		for(int i = 0; i < size; i++)
			if( id[i] == pid)
				id[i] = qid;
	}
	
	public boolean connected(int p, int q){
		return root(p) == root(q);				//check if p and q have same root	(depth of p and q array accesses)
	}
	
	public void union(int p, int q){
		int i = root(p);						//change root of p to point to root of q	(depth of p and q array accesses)
		int j = root(q);
		id[i] = j;
	}
	
	public void weightedUnion(int p, int q){
		int i = root(p);
		int j = root(q);
		if(sz[i] < sz[j]){
			id[i] = j;
			sz[j] += sz[i];
		}
		else{
			id[j] = i;
			sz[i] += sz[j];
		}
	}
	
	private int root(int i){
		while(i != id[i])		//chase parent pointers until reach root		(depth of i array accesses)
		{
			id[i] = id[id[i]];  // Make every other node in path point to its grandparent  (Path Compression)
			i = id[i];
		}
		return i;
	}
	
	public int count(){
		return 0;
	}
	
	public int find(int p){
		return 0;
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
